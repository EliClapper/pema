try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
worcs::git_update()
install.packages(c("cli", "Matrix", "ranger", "RcppArmadillo", "stringi"))
install.packages(c("cli", "Matrix", "ranger", "RcppArmadillo", "stringi"))
library(roxygen2)
roxygen2::roxygenize()
?roxygenize
library(pema)
install.packages("metaSEM", dependencies = T)
source('https://vipbg.vcu.edu/vipbg/OpenMx2/software/getOpenMx.R')
install.packages("OpenMx")
install.packages("umx", dependencies = T)
install.packages("metaSEM", dependencies = T)
umx::install.OpenMx()
umx::install.OpenMx()
umx::install.OpenMx()
library(OpenMx)
umx::install.OpenMx()
install.packages("OpenMx")
library(metafor)
library(metaSEM)
dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
### fit a random-effects model using the log risk ratios and variances as input
### note: method="REML" is the default, so one could leave this out
rma(yi, vi, data=dat, method="REML")
meta(dat$yi, dat$vi)
meta(y = dat$yi, v = dat$vi)
dat$vi
meta(y = dat$yi, v = dat$vi, data= dat)
meta(y = dat$yi, v = t(dat$vi))
meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE])
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE])
tmp$mx.model
summary(tmp$mx.model)
mxRun(tmp$mx.model)
summary(mxRun(tmp$mx.model))
rma(yi, vi, data=dat, method="REML")
tmp$mx.model$Inter$values
X <- dat[c"year", "alloc"]
X <- dat[c"year", "alloc"]
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE], x = X)
X <- dat[c"year", "alloc")]
X <- dat[c("year", "alloc")]
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE], x = X)
X <- model.matrix(~. , dat[c("year", "alloc")])
X
table(dat$alloc)
X <- model.matrix(~. , dat[c("year", "alloc")])[-1]
X <- model.matrix(~. , dat[c("year", "alloc")])[, -1]
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE], x = X)
summary(mxRun(tmp$mx.model))
tmp <- mxAutoStart(tmp$mx.model)
summary(mxTryHard(mxRun(tmp$mx.model)))
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE], x = X)
tmp$R2
tmp <- meta(y = dat[, "yi", drop = FALSE], v = dat[, "vi", drop = FALSE], x = X, run= TRUE)
tmp
summary(tmp)
devtools::install_github("trbrick/mxregsem")
install.packages("regsem")
?regsem
fit1 <- regsem(tmp$mx.model, lambda=0.05, type="lasso")
library(regsem)
fit1 <- regsem(tmp$mx.model, lambda=0.05, type="lasso")
library(mxregsem)
tmp <- mxregsem::mxModel(tmp$mx.model)
tmp <- OpenMx::mxModel(tmp$mx.model, mxregsem::mxRegularizeLASSO())
tmp$mx.model
tst <- OpenMx::mxModel("test", tmp$mx.model, mxregsem::mxRegularizeLASSO())
tst <- OpenMx::mxModel(name = "test", tmp$mx.model, mxregsem::mxRegularizeLASSO())
tmp <- OpenMx::mxModel(tmp$mx.model, mxregsem::mxRegularizeLASSO(what = paste0("Slope1_", 1:3), name = NULL))
library(rjson)
filename = "z:/channel37/befaco/phoreo/phoreo_buildvoc.wav"
thedir <- dirname(filename)
file_l <- file.path(thedir, tolower(basename(filename)))
cmd <- paste0("-i ", file_l, " -af loudnorm=I=-23:LRA=7:tp=-2:print_format=json -f null -")
setns <- system2("ffmpeg", cmd, stdout = TRUE)
setns <- rjson::fromJSON(paste0(setns[grep("\\{", setns):grep("\\}", setns)], collapse = "\n"))
cmd <- paste0("-i ", file_l, " -af loudnorm=I=-23:LRA=7:tp=-2:measured_I=", setns$input_i, ":measured_LRA=",
setns$input_lra, ":measured_tp=", setns$input_tp,
":measured_thresh=", setns$input_thresh,
":offset=", setns$target_offset,
" -ar 48k -c:a pcm_s24le -y ", gsub(".wav", "_norm.wav", file_l, fixed = TRUE))
system2("ffmpeg", cmd)
install.packages("ranger")
install.packages("`ranger`glmnet")
install.packages("glmnet")
install.packages("glmmLasso")
readClipboard()
paste0(readClipboard(), collapse = "")
gsub("#'\\s+", "", paste0(readClipboard(), collapse = ""))
strwrap(gsub("#'\\s+", "", paste0(readClipboard(), collapse = "")), 80, prefix = "#' "
)
cat(strwrap(gsub("#'\\s+", "", paste0(readClipboard(), collapse = "")), 80, prefix = "#' "))
cat(strwrap(gsub("#'\\s+", "", paste0(readClipboard(), collapse = "")), 80, prefix = "#' "), sep ="\n")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(pema)
